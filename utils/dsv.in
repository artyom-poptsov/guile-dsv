#!@GUILE@ \
-e main
!#

;;; dsv.in -- Get various information from DSV files.

;; Copyright (C) 2015, 2016, 2017, 2020, 2021 Artyom V. Poptsov <poptsov.artyom@gmail.com>
;;
;; This program is free software: you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.
;;
;; The program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.
;;
;; You should have received a copy of the GNU General Public License
;; along with the program.  If not, see <http://www.gnu.org/licenses/>.


;;; Commentary:

;; A handy tool to get various information from DSV files.


;;; Code:

(use-modules (ice-9 getopt-long)
             (scheme documentation)
             (srfi  srfi-26)
             (dsv)
             (dsv common)
             (dsv table)
             (dsv table-preset)
             (dsv version)
             (dsv cli common))



(define (print-help-and-exit)
    (display "\
Usage: dsv [options] <file>

The default behavior of the program is to print a formatted table from a
<file> to stdout.  The options listed below can be used to change or modify
this behavior.

Options:
  --help, -h                 Print this message and exit.
  --summary, -s              Print summary information for a file.
  --delimiter, -D <delim>    Set a delimiter.
  --guess-delimiter, -d      Guess a file delimiter and print the result.
  --apply, -a <procedure>    Apply an arbitrary Scheme code on each value
                             before printing.
                             The procedure is called as follows:
                               (proc cell-value row-number col-number)
                             The procedure must return a string, that in turn
                             will be printed in a cell.
  --file-format, -F <fmt>    Set a file format.  Possible formats are:
                             \"unix\" (default), \"rfc4180\"
  --with-header, -H          Use the first row of a table as a header when
                             printing the table to the screen.
  --table-borders, -b <spec> Set table borders for printing.  The value can be
                             either a borders specification or a preset name.

                             Spec is expected to be a comma-separated list of
                             key=value pairs.  The list of possible keys can be
                             found below (see \"Table parameters\".)

                             Example values:
                               - \"v=|,h=-,j=+\"

  --to, -t <fmt>             Convert a file to a specified format, write
                             the result to stdout.
  --to-delimiter, -T <delim> Convert delimiters to the specified variant.
                             When this option is not used, default delimiters
                             for the chosen output format will be used.
  --version                  Print information about Guile-DSV version.
  --debug                    Enable state machine debugging.

Table parameters:
")
    (print-table-parameters (current-output-port))
    (display "\nTable presets:\n")
    (print-table-presets (current-output-port))
  (exit))

(define (print-version)
  (format #t "dsv (Guile-DSV) ~a~%" (dsv-version/string))
  (display "\
Copyright (C) 2015-2021 Artyom V. Poptsov <poptsov.artyom@gmail.com>
License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Written by Artyom V. Poptsov.
"))

(define (main args)
  (let* ((option-spec '((help            (single-char #\h) (value #f))
                        (summary         (single-char #\s) (value #f))
                        (apply           (single-char #\a) (value #t))
                        (delimiter       (single-char #\D) (value #t))
                        (to-delimiter    (single-char #\T) (value #t))
                        (file-format     (single-char #\F) (value #t))
                        (with-header     (single-char #\H) (value #f))
                        (table-borders   (single-char #\b) (value #t))
                        (guess-delimiter (single-char #\d) (value #f))
                        (to              (single-char #\t) (value #t))
                        (version                           (value #f))
                        (debug                             (value #f))))
         (options (getopt-long args option-spec))
         ;; Options
         (help-needed?      (option-ref options 'help            #f))
         (summary-needed?   (option-ref options 'summary         #f))
         (guess-delimiter?  (option-ref options 'guess-delimiter #f))
         (file-format       (option-ref options 'file-format     "unix"))
         (apply-proc        (option-ref options 'apply           #f))
         (delimiter         (and=> (option-ref options 'delimiter #f)
                                   (cut string-ref <> 0)))
         (to-delimiter      (and=> (option-ref options 'to-delimiter #f)
                                   (cut string-ref <> 0)))
         (with-header?      (option-ref options 'with-header     #f))
         (table-borders     (option-ref options 'table-borders   ""))
         (to                (option-ref options 'to              #f))
         (version?          (option-ref options 'version         #f))
         (debug?            (option-ref options 'debug           #f))
         (args              (option-ref options '()              #f)))

    (set-debug! debug?)

    (when help-needed?
      (print-help-and-exit))

    (when version?
      (print-version)
      (exit))

    (let ((input-port (if (null? args)
                          (current-input-port)
                          (open-input-file (car args)))))
      (cond
       (summary-needed?
        (print-summary input-port (string->dsv-format file-format) delimiter))
       (guess-delimiter?
        (print-delimiter input-port (string->dsv-format file-format)))
       (to
        (convert input-port
                 delimiter
                 to-delimiter
                 (string->dsv-format file-format)
                 (string->symbol to)))
       (else
        (print-file input-port
                    (string->dsv-format file-format) table-borders
                    delimiter
                    #:with-header? with-header?
                    #:proc (and apply-proc
                               (eval-string apply-proc)))))

      (close input-port))
    (exit)))


;;;

;; Local Variables:
;; mode: Scheme
;; End:

;;; dsv.in ends here
