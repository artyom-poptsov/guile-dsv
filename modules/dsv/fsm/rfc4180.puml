@startuml

' Copyright (C) 2023 Artyom V. Poptsov <poptsov.artyom@gmail.com>
'
' This program is free software: you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation, either version 3 of the License, or
' (at your option) any later version.
'
' The program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.
'
' You should have received a copy of the GNU General Public License
' along with the program.  If not, see <http://www.gnu.org/licenses/>.

title RFC4180-style DSV parser.

legend
event-source: event-source
endlegend

[*] --> read_first_field_first_char

read_first_field_first_char: Read the first character in the first field.
read_first_field_first_char -> [*]:               char:eof-object?
read_first_field_first_char --> read_field_first_char: delimiter? -> add-field
read_first_field_first_char -> read_quoted_field: char:double-quote?
read_first_field_first_char -> [*]:               char:cr? -> throw-syntax-error
read_first_field_first_char -> read_field:        guard:#t -> push-event-to-buffer

read_field_first_char: Read the first character in a field.
read_field_first_char -> add_final_row:     char:eof-object?
read_field_first_char -> read_field_first_char: delimiter? -> add-field
read_field_first_char -> read_lf:           char:cr?
read_field_first_char -> read_quoted_field: char:double-quote?
read_field_first_char -> read_field:        guard:#t -> push-event-to-buffer

read_field: Read the first field in a row.
read_field ->  add_final_row:     char:eof-object? -> add-non-empty-field
read_field --> read_lf:           char:cr?
read_field --> read_field:        delimiter? -> add-field
read_field ->  read_field:        guard:#t -> push-event-to-buffer

read_quoted_field: Read a quoted field.
read_quoted_field --> [*]:                char:eof-object? -> throw-syntax-error
read_quoted_field ->  read_quote:         char:double-quote?
read_quoted_field ->  read_quoted_field:  guard:#t -> push-event-to-buffer

read_quote: Read the next symbol after a quote in a quoted field.
read_quote --> add_final_row:     char:eof-object? -> add-field
read_quote --> read_lf:           char:cr?
read_quote --> read_quoted_field: char:double-quote? -> push-event-to-buffer
read_quote --> read_field:        delimiter? -> add-field
read_quote --> [*]:               guard:#t -> throw-syntax-error

read_lf: Read the line feed symbol.
read_lf --> [*]:     char:eof-object? -> throw-syntax-error
read_lf --> add_row: char:lf? -> add-field
read_lf -> [*]:      guard:#t -> throw-syntax-error

add_row: Add a row to the data.
add_row:
add_row: event-source: none
add_row: entry-action: add-row
add_row -> read_field_first_char

add_final_row: Add a final row to the data.
add_final_row:
add_final_row: event-source: none
add_final_row: exit-action:  prepare-result
add_final_row -> [*]: stanza-empty?
add_final_row -> [*]: guard:#t -> add-row

' RFC 4180 explicitly states that each line must be ended with CRLF. [1]
' On the other hand, some CSV data does not follow this rule and uses
' only LF symbol as the line ending.
'
' Here we follow "Robustness principle" [2] and RFC4180 requirements
' when reading CSV data.
'
' See also RFC4180, "Encoding considerations".
'
' References:
' 1. <https://datatracker.ietf.org/doc/html/rfc4180#section-2>
' 2. "be conservative in what you do, be liberal in what you accept
'    from others"
'    <https://en.wikipedia.org/wiki/Robustness_principle>
read_field --> add_row: char:lf? -> add-field
read_quote --> add_row: char:lf? -> add-field

@enduml
