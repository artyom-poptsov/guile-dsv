\input texinfo
@c -*-texinfo-*-
@c %**start of header
@setfilename guile-dsv.info
@documentencoding UTF-8
@settitle Guile-DSV Reference Manual
@c %**end of header
@include version.texi

@copying
This manual documents Guile-DSV version @value{VERSION}.

Copyright (C) 2014-2023 Artyom V. Poptsov

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with no
Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.  A
copy of the license is included in the section entitled ``GNU Free
Documentation License.''
@end copying

@dircategory The Algorithmic Language Scheme
@direntry
* Guile-DSV: (guile-dsv).  Guile module for working with DSV data format.
@end direntry

@setchapternewpage odd

@titlepage
@sp 10

@title Guile-DSV Reference Manual
@subtitle For Guile-DSV @value{VERSION}

@author Artyom V. Poptsov

@page
@vskip 0pt plus 1filll
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@finalout
@headings double

@ifnottex
@node Top, Introduction, (dir), (dir)
@top The Guile-DSV Reference Manual

@insertcopying
@sp 1
@end ifnottex

@menu
* Introduction::
* Installation::
* API Reference::

Appendices

* GNU Free Documentation License::  The license of this manual.

@end menu

@contents

@node Introduction
@chapter Introduction

Guile-DSV is a module that provides procedures for working with
@url{https://en.wikipedia.org/wiki/Delimiter-separated_values,
delimiter-separated values} (DSV) format for programs written in
@url{https://www.gnu.org/software/guile/, GNU Guile}.

Guile-DSV supports both
@url{http://www.catb.org/~esr/writings/taoup/html/ch05s02.html#id2901882, the
Unix-style DSV format} and @url{https://tools.ietf.org/html/rfc4180, RFC
4180}.

@node Installation
@chapter Installation

Guile-DSV sources are available from GitHub at
@url{https://github.com/artyom-poptsov/guile-dsv/}.  This section
describes requirements of Guile-DSV and installation process.

Guile-DSV depends on the following packages:

@itemize
@item @url{https://www.gnu.org/software/guile/, GNU Guile}, 2.2+
@item @url{http://www.nongnu.org/guile-lib/, Guile Library}, 0.1.9+
@item @url{https://github.com/artyom-poptsov/guile-smc, Guile-SMC}, 0.6.2+
@end itemize

@section GNU Guix

On @url{https://guix.gnu.org/, GNU Guix} the package can be installed as
follows:

@example
$ guix install guile-dsv
@end example

If you want to install the most recent version of Guile-DSV right from the
``master'' branch (on your own risk), you can use the following set of
commands:

@example
$ git clone git@@github.com:artyom-poptsov/guile-dsv.git
$ cd guile-dsv
$ guix package -f guix.scm
@end example

@section Manual

On Ubuntu GNU/Linux, you will need the following packages:
@example
$ sudo apt install \
    make \
    automake \
    autoconf \
    guile-3.0 \
    guile-3.0-dev \
    guile-library \
    texinfo \
    help2man
@end example

Get the sources of Guile-DSV from GitHub using Git (a good introduction to Git
is @url{https://git-scm.com/book/en/v2, Pro Git} book, which is available
online):

@example
$ git clone git@@github.com:artyom-poptsov/guile-dsv.git
@end example

Configure the sources:

@example
$ cd guile-dsv/
$ autoreconf -vif
$ ./configure --prefix=/usr
@end example

Build and install the library:

@example
$ make -j$(nproc)
$ make install
@end example

For a basic explanation of the installation of the package, see the
@file{INSTALL} file.

Please @strong{note} that you will need
@url{https://www.gnu.org/software/automake/, Automake} version 1.12 or
later to run self-tests with @command{make check} (but the library
itself can be built with older Automake version such as 1.11).

@strong{important} You probably want to call @command{configure} with
the @option{--with-guilesitedir} option so that this package is
installed in Guile's default path.  But, if you don't know where your
Guile site directory is, run @command{configure} without the option,
and it will give you a suggestion.

@node API Reference
@chapter API Reference

These procedures are provided by @code{(dsv)} module.

All the procedures accept an optional @var{format} argument that specifies the
format of DSV data.  Allowed formats are the following symbols:

@table @samp
@item unix
@url{http://www.catb.org/~esr/writings/taoup/html/ch05s02.html#id2901882, the
Unix-style DSV format}
@item rfc4180
@url{https://tools.ietf.org/html/rfc4180, RFC 4180}
@end table

By default a @var{format} is set to @code{'unix}.

@deffn {Scheme Procedure} dsv->scm [port [delimiter]] @
              [#:format='unix] @
              [#:comment-prefix='default] @
              [#:debug-mode?=#f] @
              [#:log-driver="syslog"] @
              [#:log-opt='()]
@deffnx {Scheme Procedure} dsv-string->scm string [delimiter] @
              [#:format='unix] @
              [#:comment-prefix='default] @
              [#:debug-mode?=#f] @
              [#:log-driver="syslog"] @
              [#:log-opt='()]
Read DSV data in a specified @var{format} from a @var{port}.  If the
@var{port} is not set, read from the default input port.  If a @var{delimiter}
is not set, use the default delimiter for the format.

When a @var{format} is set to @code{'unix}, lines commented with a
@var{comment-prefix} will be skipped.  @var{comment-prefix} is expected to be
either a string or @code{'default} symbol (which means to use the default
prefix for the format), or @code{'none} symbol (that tells the procedure not
to skip anything); default value of @var{comment-prefix} for Unix format is
``#''.

Empty lines in DSV data will be converted to lists that contain one element
(an empty string.)

When format is set to @code{'unix}, then following nonprintable characters
will be escaped with backslashes: @code{#\page}, @code{#\newline},
@code{#\return}, @code{#\tab}, @code{#\vtab}.  E.g. @code{#\page} will become
``\f''.

The procedure returns a list of lists that represents a DSV table, or throws
an error.

@var{log-driver} allows to set the logging driver.  Possible values are:
``syslog'' (default), ``file'', ``null''.  Using @var{log-opt} parameter one
can pass additional options for a logging driver.

The @code{dsv-string->scm} procedure works the same way as @code{dsv->scm},
except it takes a DSV @var{string} instead of a port.

Examples:

@lisp
(dsv->scm (open-input-file "/etc/passwd"))
@result{}
(...
 ("news" "x" "9" "13" "news" "/usr/lib/news" "/bin/false")
 ("root" "x" "0" "0" "root" "/root" "/bin/zsh"))

(dsv-string->scm "a:b:c")
@result{} '(("a" "b" "c"))

(dsv-string->scm "a;b;c" #\;)
@result{} '(("a" "b" "c"))

(dsv-string->scm "a,b\\,c" #\,)
@result{} '(("a" "b,c"))

;; Handle backslash escapes:
(dsv-string->scm "a\\nb\\\\c\n")
@result{} '(("a\nb\\c"))

;; Handle record continuation by ignoring backslash-escaped newlines:
(dsv-string->scm "a \\\nb:c")
@result{} '(("a b" "c"))

@end lisp

@end deffn

@deffn {Scheme Procedure} scm->dsv list [port [delimiter]] [#:format='unix]
@deffnx {Scheme Procedure} scm->dsv-string list [delimiter] [#:format='unix]
Write a list of values @var{list} as a sequence of DSV strings in a specified
@var{format} to a @var{port}.  If the @var{port} is not set, write to the
default output port.  If a @var{delimiter} is not set, use the default
delimiter for a @var{format}.

The procedure accepts either a DSV table (as a two-dimensional @var{list}), or
a single table row (as a one-dimesional @var{list} of strings).

When format is set to @code{'unix}, then the following escaped nonprintable
characters will be accepted: @code{#\page}, @code{#\newline}, @code{#\return},
@code{#\tab}, @code{#\vtab}.  E.g. ``\f'' will be read as @code{#\page}.

Return value is undefined.  The procedure throws a @code{dsv-parser-error} on
an error.

The @code{scm->dsv-string} procedure works the same way as @code{scm->dsv},
except it returns DSV data as a string instead of printing it to a port.

Examples:

@lisp
(scm->dsv '("news" "x" "9" "13" "news" "/usr/lib/news" "/bin/false"))
@print{} news:x:9:13:news:/usr/lib/news:/bin/false

(scm->dsv '(("news" "x" "9" "13" "news" "/usr/lib/news" "/bin/false")
            ("root" "x" "0" "0" "root" "/root" "/bin/zsh")))
@print{}
news:x:9:13:news:/usr/lib/news:/bin/false
root:x:0:0:root:/root:/bin/zsh

(scm->dsv-string '("a" "b" "c"))
@result{} "a:b:c\n"

;; If a delimiter occures inside a field, it will be escaped with a backslash:
(scm->dsv-string '("a" "b:c"))
@result{} "a:b\\:c\n"

;; Use a custom field delimiter:
(scm->dsv-string '("a" "b" "c") #\,)
@result{} "a,b,c\n"

;; Make use of RFC 4180:
(scm->dsv-string '("a" "b" "c,d") #:format 'rfc4180)
@result{} "a,b,\"c,d\"\r\n"

;; Escape non-printable characters and backslashes:
(scm->dsv-string '("a\nb" "c\\d"))
@result{} "a\\nb:c\\\\d\n"

@end lisp

@end deffn

@deffn {Scheme Procedure} guess-delimiter string [known-delimiters] [#:format='unix]
Guess a DSV @var{string} delimiter.  Optionally accept a list of
@var{known-delimiters} as an argument.  Default known delimiters are:
@code{#\,}, @code{#\:}, @code{#\;}, @code{#\|}, @code{#\tab}, @code{#\space}.

The procedure returns @code{#f} if it cannot determine a delimiter based on
the given arguments.  If an error occured then it throws
@code{dsv-parser-error}.

Note that when @var{known-delimiters} list contains less than two elements,
the procedure returns @code{#f}.

Examples:

@lisp
(guess-delimiter "a:b,c,d")
@result{} #\,

(guess-delimiter "a,b:c")
@result{} #f

(guess-delimiter "a,b,c" #:format 'rfc4180)
@result{} #\,

;; Using custom known delimiters list:
(guess-delimiter "a-b-c" '(#\- #\,))
@result{} #\-
@end lisp

@end deffn

@c -----------------------------------------------------------------------------
@cindex Tables
@section Tables

Module @code{(dsv table)} provides procedures for working with parsed DSV
tables.

@deffn {Scheme Procedure} string* str k
Multiply a string @var{str} by @var{k} in a Python way to construct a new
string from Kth instances of @var{str}.  Return the new string.
@end deffn

@deffn {Scheme Procedure} stylize str style
Use a @var{style} terminal escape codes to change the style of a string
@var{str}.  Return the styled string with escape codes.
@end deffn

@deffn {Scheme Procedure} table-print-element element port
Print an @var{element} of a table to a @var{port}.  If an @var{element} is
@code{#f}, then print a single space.
@end deffn

@deffn {Scheme Procedure} print-table-parameters port
Print all known table parameters to a @var{port}.
@end deffn

@deffn {Scheme Procedure} shorthand->table-parameter sh
Convert a shorthand @var{sh} to a table parameter.
@end deffn

@deffn {Scheme Procedure} get-width table
Get maximum field width for each row of @var{table}.
@end deffn

@deffn {Scheme Procedure} format-table table borders @
       [#:with-header?=#f] @
       [#:port=(current-output-port)]

Print a formatted @var{table} to a @var{port}, using @var{borders}
specification.
@end deffn

@deffn {Scheme Procedure} table-map proc table
Apply a procedure @var{PROC} to each cell of a @var{table}.  Return a new
table.
@end deffn

@deffn {Scheme Procedure} table-filter-row proc table
Remove all the rows from a @var{table} for which procedure @var{proc} returns
@code{#f}.
@end deffn

@deffn {Scheme Procedure} table-filter-column proc table
Remove all the columns from a @var{table} for which procedure @var{proc}
returns @code{#f}.
@end deffn

@deffn {Scheme Procedure} table-wrap @
               table @
               current-column-widths @
               [#:width=80] @
               [#:padding=0]

Wrap a @var{table} in such way that the table will fit into @var{width}
columns.

@var{current-column-widths} should be the value returned by @code{get-width}
procedure.

@end deffn

@deffn {Scheme Procedure} table-wrap-row row widths
Wrap a table @var{row} to fit each cell it into the specified @var{widths}.
Return a list where each row is represented as a sub-list of strings.
@end deffn

@deffn {Scheme Procedure} string-slice s width
Slice a string @var{s} into parts of @var{width} length.  Return the list of
strings.
@end deffn

@c -----------------------------------------------------------------------------
@cindex Table Presets
@section Table Presets

Module @code{(dsv table-preset)} provides procedures for working with table
presets.  A table preset is a pre-defined table style that specifies table
outer borders, row separators etc.

@deffn {Scheme Procedure} print-table-presets port
Print all known table presets to a @var{port}.
@end deffn

@deffn {Scheme Procedure} load-table-preset name
Read table preset @var{name} from a file.  Return the preset as a list.
@end deffn

@deffn {Scheme Procedure} table-preset-override preset borders
Override a table @var{preset} with a @var{borders} specification.  Return the
updated table preset.
@end deffn

@deffn {Scheme Procedure} table-preset-name? string
Check if a @var{string} is a table preset name.
@end deffn

@c -----------------------------------------------------------------------------
@section Version Information

Module @code{(dsv version)} contains procedures that allow to acquire
information about the Guile-DSV version in the @url{https://semver.org/,
Semantic Versioning} format.

Guile-DSV version consists of three parts:
@example
   MAJOR.MINOR.PATCH
@end example

The procedures below allow to get any of the version part or the version as a
whole.

@deffn {Scheme Procedure} dsv-version/string
Get the raw Guile-DSV version as a string.
@end deffn

@deffn {Scheme Procedure} dsv-version
Return the Guile-DSV version as a list of the following form:
@code{'(MAJOR MINOR PATCH)}
@end deffn

@deffn  {Scheme Procedure} dsv-version/major
@deffnx {Scheme Procedure} dsv-version/minor
@deffnx {Scheme Procedure} dsv-version/patch
Get the MAJOR, MINOR or PATCH parts of the Guile-DSV version.
@end deffn

@c -----------------------------------------------------------------------------
@section Debugging

@deffn {Scheme Procedure} set-debug! enabled?
Enable or disable debugging traces by setting the debug mode to an
@var{enabled?} boolean value.

By default the debug mode is disabled.
@end deffn

@node GNU Free Documentation License
@appendix GNU Free Documentation License

@include fdl.texi

@bye
