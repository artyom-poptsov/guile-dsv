#+TITLE: Guile-DSV News -- history of user-visible changes.
#+STARTUP: content hidestars

Copyright (C) Artyom V. Poptsov <poptsov.artyom@gmail.com>

  Copying and distribution of this file, with or without modification,
  are permitted in any medium without royalty provided the copyright
  notice and this notice are preserved.

* Unreleased
** Bugfixes
*** RFC 4180 now handles empty trailing fields correctly
The library would skip a trailing empty field in a row thus a row shorter than
the rest of the table rows would be made.  For example, the following data:

#+BEGIN_EXAMPLE
  a,b
  c,
#+END_EXAMPLE

Would result in:
#+BEGIN_EXAMPLE lisp
'(("a" "b")
  ("c"))
#+END_EXAMPLE

Now this behavior should be fixed so the result for the same data will look as
follows:
#+BEGIN_EXAMPLE lisp
'(("a" "b")
  ("c" ""))
#+END_EXAMPLE

* Changes in version 0.5.1 (2022-02-05)
** Add Markdown table preset
    =dsv= now has Markdown table preset that allows to generate Markdown
    tables from a DSV data.
** New module: =(dsv version)=
    This module contains procedures that return information about the current
    Guile-DSV version.
** =dsv= now handles =--version= option
    When this option is passed to the =dsv= program it prints the version
    information and a short copyright note to the stdout.
** =dsv= now handles =--map-cell= option
    This option allows to apply an arbitrary Scheme code to each table cell
    before printing.
** =dsv= now handles =--filter-row= option
    This option allows to keep only that rows from a table for which the
    provided Scheme code returned #t.
** =dsv= now handles =--filter-column= option
    This option allows to keep only that columns from a table for which the
    provided Scheme code returned #t.

* Changes in version 0.5.0 (2021-12-12)
** Bugfixes
*** Fix a regression in =dsv --summary= introduced in 0.4.1
** API changes in the =dsv= tool
    Make table style more configurable by adding new table parameters.  Some
    old parameters are renamed to make the CLI API more consistent.
** =dsv= now handles =--with-header= option
    This option allows to use the first row of data as the table header.

    When pseudo-graphical tables are printed to the screen the first row that
    contains the header now has different style (which is configurable.)

    Thanks to Dr. Arne Babenhauserheide <https://www.draketo.de/> for the
    idea.
** New table preset: "org"
    This preset can be used to generate Emacs org-mode tables from data.

    Thanks to Dr. Arne Babenhauserheide <https://www.draketo.de/> for the
    idea.
** All table presets are updated to provide styles for the header
** New modules
    Some code from the =dsv= tool is moved to separate modules available for
    users:
    - (dsv table)
    - (dsv table-preset)

    See the Texinfo documentation for more info.
** Improve Autotools scripts
** Update Texinfo documentation
* Changes in version 0.4.1 (2021-12-11)
** Changes in the =dsv= tool
*** Allow to specify wider range of table border parameters
*** Allow to use table border presets
    Currently the following presets are available:
    - ascii
    - graphic
    - graphic-bold
    - graphic-double
* Changes in version 0.4.0 (2020-02-14)
** Allow to build with GNU Guile 3
** Improve the performance of Unix DSV parser
   According to tests on 50k+ datasets, the parser should be almost 3x faster
   now.
** Expand the test suite
* Changes in version 0.3.0 (2020-05-11)
** Remove bundled SRFI-64
   This module is shipped with Guile since version 2.0.12.
** Improve =dsv= tool (=utils/dsv.in=)
   - The tool now is capable of converting delimiters and reading data from
     stdin.
   - Add check for empty argument: print help message if no arguments
     specified.
** Bugfixes
*** Fix quote handling in RFC4180 data
    The library would always fail to correctly parse RFC4180 format because there
    was an error in the state machine: it considered even number of double quotes
    as a proof that the input data was correct.
  
    This change fixes the problem (#7 on GitHub) by re-writing the FSM to follow
    the standard more closely. Also now the FSM for RFC4180 reads data character
    by character which is more elegant and controllable.
  
    Thanks to Alex Sassmannshausen for attracting my attention to the parser
    issues in <https://github.com/artyom-poptsov/guile-dsv/issues/7>
** Improve tests
   Expand test suite, make tests more fine-grained.
* Changes in version 0.2.1 (2017-11-25)
** Add Guix package recipe
   Guile-DSV now has GNU Guix <https://www.gnu.org/software/guix/> package
   recipe that allows to use the package with Guix package manager.

   Thanks to Alex Sassmannshausen <alex@pompo.co> for writing the recipe.
** Bugfixes
*** RFC4180 now correctly handles quoted final fields in CRLF context
    The RFC4180 parser would always fail to parse strings such as:
      "test,hello,\"blah\"\r\n"
      "test,hello,\"blah\"\r\nincorrect,field,parsing"

    due to implementation defects.  Now the parser works correctly in such
    cases.

    Thanks to Alex Sassmannshausen for the patches!

    Reported by Alex Sassmannshausen <alex@pompo.co> in
    <https://github.com/artyom-poptsov/guile-dsv/issues/3>

* Changes in version 0.2.0 (2015-04-16)
** API change
   Procedures were renamed:
   - 'dsv-string->list' was renamed to 'dsv-string->scm'.
   - 'list->dsv-string' was renamed to 'scm->dsv-string'.
   - 'dsv-read' was renamed to 'dsv->scm'.
   - 'dsv-write' was renamed to 'scm->dsv'.

   Also see the procedure-specific changes below.
** Add RFC 4180 parser
   Procedures now accept optional keyed argument called 'format' that allows
   to switch between the Unix-style DSV format and the RFC 4180 (CSV) format.
** Unix parser now handles C-style backslash escapes
   as described in
   <http://www.catb.org/~esr/writings/taoup/html/ch05s02.html#id2901882>

   Specifically when the format is set to 'unix', 'dsv-string->scm' and
   'dsv->scm' now ignore backslash-escaped newlines; also all the procedures
   handle escaped nonprintable characters properly.
** Procedures now throw 'dsv-parser-error' on an error
** 'dsv-string->scm' now returns a table
   The procedure now returns a table (a list of lists) in which every inlined
   list represents a row of the table.
** New 'set-debug!' procedure in (dsv)
   The procedure allows to enable or disable debugging traces.  The debug mode
   is disabled by default.
** 'dsv-string->scm' and 'dsv->scm' now accept 'comment-prefix'
   'comment-symbol' argument is renamed to 'commen-prefix' and expected to be
   a string instead of a char.
** 'scm->dsv' and 'scm->dsv-string' procedures add a line break
   The procedures now add a line break that is default for a specified format
   at the end of lines.
** 'guess-delimiter' in (dsv) now accepts an optional 'known-delimiters' argument
   The argument can be used to privide the procedure with the list of
   delimiters to test to.
** Documentation update
   Description of the API was updated and more usage examples was added.

* Changes in version 0.1.0 (2014-11-30)
** Release of the first version of Guile-DSV

Local Variables:
mode: org
End:
